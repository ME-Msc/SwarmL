/* Program */
program ::= platform? library* action+ agent+ behavior+ task+ main

platform ::= "platform" variable

library ::= "import" variable

library_call ::= variable ( "." variable )* ( '(' actual_parameters ')' )?

/* Action */
action ::= "Action" variable "(" formal_parameters? ")" action_compound

action_compound ::= "{" action_statement* "}"

action_statement ::= action_if_else
                    | action_return_statement
                    | library_call_statement
                    | assignment_statement
                    | post_statement
                    | get_statement
                    | dget_statement
                    | modify_statement
                    | empty_statement 

action_if_else ::= "if" "(" expression ")" action_compound ( "else" action_compound )?

action_return_statement ::= "return" expression ";"

library_call_statement ::= library_call ";"

/* Agent */
agent ::= "Agent" variable "{" ( variable ( "," variable )* )? ";" "}"

agent_call_statement ::= "Agent" variable integer ";"

/* Behavior */
behavior ::= "Behavior" variable "(" formal_parameters? ")" "{" behavior_init_block behavior_goal_block behavior_routine_block "}"

behavior_init_block ::= "@init" behavior_compound

behavior_goal_block ::= "@goal" "{" ( behavior_statement* "$" expression )? "}"

behavior_routine_block ::= "@routine" behavior_compound ( "||" behavior_compound )*

behavior_compound ::= "{" behavior_statement* "}"

behavior_statement ::= behavior_if_else
                        | function_call_statement
                        | assignment_statement
                        | empty_statement

behavior_if_else ::= "if" "(" expression ")" behavior_compound ( "else" behavior_compound )?

function_call_statement ::= variable "(" actual_parameters? ")" ";"

/* Task */
task ::= "Task" variable "(" formal_parameters_agent_range_list ( "," formal_parameters )? ")" "{" task_init_block task_goal_block task_routine_block "}"

task_init_block ::= "@init" task_compound

task_goal_block ::= "@goal" "{" ( task_statement* "$" expression )? "}"

task_routine_block ::= "@routine" task_compound ( "||" task_compound )*

task_compound ::= "{" task_statement* "}"

task_statement ::= task_order
                | task_each
                | task_if_else
                | task_call_statement
                | assignment_statement
                | post_statement
                | get_statement
                | dget_statement
                | modify_statement
                | empty_statement

task_order ::= "order" actual_parameters_agent_range "{" function_call_statement* "}"

task_each ::= "each" actual_parameters_agent_range "{" function_call_statement* "}"

task_if_else ::= "if" "(" expression ")" task_compound ( "else" task_compound )?

task_call_statement ::= variable "(" actual_parameters_agent_range_list ( "," actual_parameters )? ")" ";"

/* Main */
main ::= "Main" "{" agent_call_statement+ task_call_statement "}"

/* Basic statement */
assignment_statement ::= variable "=" ( ( string  ";" ) 
                                        | function_call_statement
                                        | ( expression ";" ) )

post_statement ::= "POST" "(" knowledge "," ( string | expression ) ")" ";"

get_statement ::= "GET" "(" knowledge  "," variable ")" ";"

dget_statement ::= "DGET" "(" knowledge "," variable ")" ";"

modify_statement ::= "MODIFY" "(" knowledge "," variable "," ( string | expression ) ")" ";"

empty_statement ::= ";"

/* Parameter */
formal_parameters_agent_range_list ::= "{" formal_parameters_agent_range ( "," formal_parameters_agent_range )* "}"

actual_parameters_agent_range_list ::= "{" actual_parameters_agent_range ( "," actual_parameters_agent_range )* "}"

formal_parameters_agent_range ::= variable "[" variable "~" variable "]"

actual_parameters_agent_range ::= variable "[" additive_expression "~" additive_expression "]"

formal_parameters ::= variable ( "," variable )*

actual_parameters ::= additive_expression ( "," additive_expression )*

/* Expressions */
expression ::= logical_not_expression

logical_not_expression ::= "not"? logical_or_expression

logical_or_expression ::= logical_and_expression
                        | logical_and_expression "or" logical_or_expression

logical_and_expression ::= equality_expression
                        | equality_expression "and" logical_and_expression

equality_expression ::= relational_expression
                    | relational_expression "==" equality_expression
                    | relational_expression "!=" equality_expression

relational_expression ::= additive_expression
                        | additive_expression "<" relational_expression
                        | additive_expression "<=" relational_expression
                        | additive_expression ">" relational_expression
                        | additive_expression ">=" relational_expression

additive_expression ::= multiplicative_expression ( ( "+" | "-" ) multiplicative_expression )*

multiplicative_expression ::= primary_expression ( ( "*" | "/" | "%" ) primary_expression )*

primary_expression ::= ( ( "+" | "-" ) primary_expression )
                        | "(" additive_expression ")"
                        | library_call
                        | variable
                        | boolean
                        | integer
                        | float

variable ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

knowledge ::= variable

boolean ::= "False" | "True"

integer ::= "0" | ( [1-9] [0-9]* )

float ::= integer "." integer

string ::= ( "'" | '"' ) ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )*  ( "'" | '"' )

comments ::= "/*" ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )* "*\/"